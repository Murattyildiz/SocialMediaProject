@model List<ArticleDetail>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

<div id="mainContent" class="col-8 d-flex flex-wrap col-12 col-md-auto mb-2 align-items-start justify-content-center p-1">

    <div class="row py-3 border rounded-3 shadow ">
        <form action="/share-content" method="post">
            <input type="hidden" value="@ViewData["UserId"]" name="UserId" />
            <input type="hidden" value="@DateTime.Now" name="SharingDate" />
            <div class="form-group w-100 mb-3">
                <label for="topic" class="d-block fw-bold">Konu Seçiniz:</label>
                @await Component.InvokeAsync("_FormTopic")
            </div>
            <textarea id="summernote" type="text" class=" w-100" name="Content"></textarea>
            <button class="btn btn-outline-success float-end mt-2" type="submit">Paylaş</button>
        </form>
    </div>
    @if (Model != null && Model.Any())
    {
        <!-- paylaşılan içerik başlangıç -->
        @foreach (var articleDetail in Model)
        {

            <div class="row w-100 mt-3">
                <div class="contentUserImage col-2 justify-content-start h-50 py-1 px-1 text-center">
                    <div class="userImageArea border py-3 mb-4 mt-3  h-auto">
                        <a class="d-inline-flex align-items-center text-decoration-none" href="">
                            <img src="https://localhost:5190/@articleDetail.UserImage" class="img-fluid img-thumbnail rounded-circle" width="50" height="50" alt="">
                        </a>
                        <h6>@articleDetail.UserName</h6>
                    </div>
                </div>
                <div class="contents col-10 border ps-3 py-3 ms-0 shadow">


                    <div>
                        <span class="fw-bold"><i>#@articleDetail.TopicTitle</i></span>
                        <button type="button" class="btn-close float-end pt-3 delete-article" data-article="@articleDetail.Id" data-bs-toggle="modal" data-bs-target="#staticBackdrop"></button>
                        <button class="btn btn-outline-warning border-0 float-end get-article" data-article="@articleDetail.Id" data-bs-toggle="modal" data-bs-target="#articleUpdateModal"><i class="bi bi-pencil-square"></i></button>

                    </div>
                    @Html.Raw(articleDetail.Content)
                    <div class="pt-3 ps-2 pe-2">
                        <div class="d-flex justify-content-between align-items-center">
                            @{
                                var validComments = articleDetail.CommentDetails?.Where(x => x.Id != -1).Count() ?? 0;
                                if (validComments > 0)
                                {
                                    <button class="btn btn-outline-primary show-comments-btn" type="button" data-article-id="@articleDetail.Id">
                                        <i class="bi bi-chat-dots"></i> 
                                        Yorumlar (@validComments)
                        </button>
                                }
                                else
                                {
                                    <span class="text-muted">Henüz yorum yapılmamış</span>
                                }
                            }
                            <button class="btn btn-outline-secondary">@articleDetail.SharingDate</button>
                        </div>
                        
                        <div class="comments-section mt-3" id="comments-@articleDetail.Id" style="display: none;">
                            @if (articleDetail.CommentDetails != null && articleDetail.CommentDetails.Any())
                            {
                                foreach (var comment in articleDetail.CommentDetails)
                                {
                                    <div class="comment mb-3 p-3 border rounded">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                @if (string.IsNullOrEmpty(comment.Image))
                                                {
                                                    <img src="https://localhost:5190/images/default.jpg" class="rounded-circle me-2" width="40" height="40" />
                                                }
                                                else
                                                {
                                                    <img src="https://localhost:5190/@comment.Image" class="rounded-circle me-2" width="40" height="40" />
                                                }
                                                <div>
                                                    <strong>@comment.UserName</strong>
                                                    <small class="text-muted d-block">@comment.CommentDate.ToString("dd.MM.yyyy HH:mm:ss")</small>
                                                </div>
                                            </div>
                                            @if (comment.UserId == ViewBag.UserId || User.IsInRole("admin"))
                                            {
                                                <button class="btn btn-sm btn-danger delete-comment" data-comment="@comment.Id" data-bs-toggle="modal" data-bs-target="#deleteCommentModal">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                        <p class="mt-2 mb-0">@comment.CommentText</p>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted">Henüz yorum yapılmamış.</p>
                            }
                            <div class="comment-form-section mt-3">
                                <form class="comment-form" data-article-id="@articleDetail.Id">
                                    <div class="input-group">
                                        <input type="text" name="CommentText" class="form-control" placeholder="Yorumunuzu yazın...">
                                        <button type="submit" class="btn btn-primary">Gönder</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        }

        <!-- paylaşılan içerik bitiş -->
    }
    else
    {
        <p>İçerik bulunamadı</p>
    }


</div>
@await Component.InvokeAsync("_RightSide")
<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">İçerik Siliniyor</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form action="/delete-article" method="post">
                    <div class="input-group mt-3 mb-3">
                        <input type="text" name="id" class="form-control" id="articleId">
                        <span>Bu paylaşımı silmek istediğinize emin misiniz?</span>
                        <span>Bu işlemi geri alamazsınız.</span>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">İptal</button>
                        <button type="submit" class="btn btn-success">Eminim Sil</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<!-- ArticleUpdateModal -->
<div class="modal modal-lg fade" id="articleUpdateModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="articleUpdateModalLabel1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="articleUpdateModalLabel1">Güncelleme İşlemi</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form action="/update-content" method="post">
                    <input type="hidden" name="Id" class="form-control" id="Id">
                    <input type="hidden" name="UserId" class="form-control" value="@ViewData["UserId"]">
                    <input type="hidden" name="SharingDate" class="form-control" value="@DateTime.Now">

                    <label class="form-label">Bir Konu Seçiniz:</label>
                    <div class="input-group mt-1 mb-3">
                        <select class="form-select select-topic" name="TopicId">
                            <option>-Lütfen Bir Konu Başlığı Seçiniz-</option>
                        </select>
                    </div>

                    <div class="input-group mt-3 mb-3">
                        <textarea id="summernote1" class="w-100" name="Content"></textarea>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">İptal</button>
                        <button type="submit" class="btn btn-success">Güncelle</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<!-- Yorum Silme Modal -->
<div class="modal fade" id="deleteCommentModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deleteCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteCommentModalLabel">Yorum Silme</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bu yorumu silmek istediğinize emin misiniz?</p>
                <p class="text-danger">Bu işlem geri alınamaz!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteComment">Sil</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            $(".contents > * > img").addClass("img-fluid");

            // Show/Hide Comments
            $(".show-comments-btn").click(function() {
                var articleId = $(this).data("article-id");
                var commentsSection = $("#comments-" + articleId);
                
                if (commentsSection.is(":visible")) {
                    commentsSection.slideUp();
                    $(this).removeClass("btn-primary").addClass("btn-outline-primary");
                } else {
                    commentsSection.slideDown();
                    $(this).removeClass("btn-outline-primary").addClass("btn-primary");
                }
            });

            $(".comment-form").on("submit", function (e) {
                e.preventDefault();
                var form = $(this);
                var ArticleId = form.data("article-id");
                var CommentText = form.find("input[name=CommentText]").val();
                
                if (!CommentText || CommentText.trim() === "") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Uyarı!',
                        text: 'Lütfen bir yorum yazın.'
                    });
                    return;
                }

                var comment = {
                    ArticleId: parseInt(ArticleId),
                    CommentText: CommentText.trim()
                };

                $.ajax({
                    type: "POST",
                    url: "/post-comment",
                    contentType: "application/json",
                    data: JSON.stringify(comment),
                    beforeSend: function() {
                        form.find('button[type="submit"]').prop('disabled', true)
                            .html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Gönderiliyor...');
                    },
                    success: function (response) {
                        if (response.success) {
                            form[0].reset();
                            Swal.fire({
                                icon: 'success',
                                title: 'Başarılı!',
                                text: 'Yorumunuz başarıyla eklendi.',
                                timer: 1000,
                                showConfirmButton: false
                            }).then(function() {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Hata!',
                                text: response.message || 'Yorum eklenirken bir hata oluştu.'
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Yorum ekleme hatası:', error);
                        console.error('Sunucu yanıtı:', xhr.responseText);
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata!',
                            text: 'Yorum eklenirken bir hata oluştu. Lütfen daha sonra tekrar deneyin.'
                        });
                    },
                    complete: function() {
                        form.find('button[type="submit"]').prop('disabled', false)
                            .html('Gönder');
                    }
                });
            });

            $(".get-article").on("click", function (e) {
                e.preventDefault();

                var ArticleId = $(this).data("article");
                console.log(ArticleId);

                var tag = $(".select-topic");

                $.ajax({
                    type: "GET",
                    url: "/getarticlebyid",
                    data: {
                        id: ArticleId
                    },
                    success: function (response) {
                        console.log(response.article);
                        console.log(response.topics);

                        $("#Id").val(ArticleId);
                        $("#summernote1").summernote('code', response.article.content);
                        tag.empty();
                        $.each(response.topics, function (index, item) {
                            var option = `<option value="${item.id}" ${response.article.topicId == item.id ? 'selected' : ''}>${item.topicTitle}</option>`;
                            tag.append(option);
                        });

                    }, error: function (xhr, status, error) {
                        console.error("Ajax Error:", error);
                    }
                });
            })

            $(".delete-article").on("click", function (e) {
                e.preventDefault();
                var ArticleId = $(this).data("article");
                console.log(ArticleId);
                $("#articleId").val(ArticleId);
            })

            $(".delete-comment").on("click", function (e) {
                e.preventDefault();
                var CommentId = $(this).data("comment");
                console.log(CommentId);
                $("#commentId").val(CommentId);
            })

            let commentIdToDelete = null;

            // Yorum silme butonuna tıklandığında
            $('.delete-comment').click(function() {
                commentIdToDelete = $(this).data('comment');
            });

            // Silme işlemini onaylama
            $('#confirmDeleteComment').click(function() {
                if (!commentIdToDelete) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata!',
                        text: 'Silinecek yorum bulunamadı.'
                    });
                    return;
                }

                $.ajax({
                    url: '/delete-comment',
                    type: 'POST',
                    data: { id: commentIdToDelete },
                    beforeSend: function() {
                        $('#confirmDeleteComment').prop('disabled', true)
                            .html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Siliniyor...');
                    },
                    success: function(response) {
                        if (response && response.success) {
                            $('#deleteCommentModal').modal('hide');
                            Swal.fire({
                                icon: 'success',
                                title: 'Başarılı!',
                                text: response.message || 'Yorum başarıyla silindi.',
                                timer: 1000,
                                showConfirmButton: false
                            }).then(function() {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Hata!',
                                text: response.message || 'Yorum silinirken bir hata oluştu.'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Silme hatası:', error);
                        console.error('Sunucu yanıtı:', xhr.responseText);
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata!',
                            text: 'Yorum silinirken bir hata oluştu. Lütfen daha sonra tekrar deneyin.'
                        });
                    },
                    complete: function() {
                        $('#confirmDeleteComment').prop('disabled', false).html('Sil');
                    }
                });
            });
        });
    </script>
}